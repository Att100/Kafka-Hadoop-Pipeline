---
version: '3'
services:
  # Hadoop Services
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - ./src:/home/workspace/src
      - ./docker/hadoop:/home/workspace/modifications
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    ports:
      - 9864:9864
    volumes:
      - ./docker/hadoop:/home/workspace/modifications
    depends_on:
      - namenode
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    ports:
      - 8088:8088
    volumes:
      - ./docker/hadoop:/home/workspace/modifications
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    ports:
      - 8042:8042
    volumes:
      - ./docker/hadoop:/home/workspace/modifications
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    ports:
      - 8188:8188
    volumes:
      - ./docker/hadoop:/home/workspace/modifications
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network

  # Kafka Services
  zookeeper1:
    container_name: zookeeper1
    hostname: zookeeper1
    image: confluentinc/cp-zookeeper:5.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-network
    restart: on-failure

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29093,kafka3:29094
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka-network

  kafka1:
    hostname: kafka1
    container_name: kafka1
    image: confluentinc/cp-kafka:5.0.0
    depends_on:
      - zookeeper1
    networks:
      - kafka-network
    ports:
      - "9092:9092"
      - "29092:29092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=19092"
      JMX_PORT: "19092"
    restart: on-failure

  kafka2:
    hostname: kafka2
    container_name: kafka2
    image: confluentinc/cp-kafka:5.0.0
    depends_on:
      - zookeeper1
    networks:
      - kafka-network
    ports:
      - "9093:9092"
      - "29093:29092"
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=19093"
      JMX_PORT: "19093"
    restart: on-failure

  kafka3:
    hostname: kafka3
    container_name: kafka3
    image: confluentinc/cp-kafka:5.0.0
    depends_on:
      - zookeeper1
    networks:
      - kafka-network
    ports:
      - "9094:9092"
      - "29094:29092"
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://kafka3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=19094"
      JMX_PORT: "19094"
    restart: on-failure

  # Kafka Clients
  producer:
    container_name: producer
    build: ./docker/producer
    volumes:
      - .:/code
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-network
    restart: on-failure

  consumer1:
    container_name: consumer1
    build: ./docker/consumer1
    volumes:
      - .:/code
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-network
    restart: on-failure

  consumer2:
    container_name: consumer2
    build: ./docker/consumer2
    volumes:
      - .:/code
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-network
    restart: on-failure

networks:
  kafka-network:
    external: true
